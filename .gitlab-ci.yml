stages:
  - test
  - docker
  - migrate
  - deploy
  - backup

default:
  before_script:
    - echo "CI_COMMIT=$CI_COMMIT_SHORT_SHA"

variables:
  DOCKER_TLS_CERTDIR: ""
  DOCKER_DRIVER: overlay2
  GOFLAGS: "-mod=mod"
  GOCACHE: "$CI_PROJECT_DIR/.cache/go-build"

test:
  stage: test
  image: golang:1.24
  cache:
    key: "go-mod-$CI_COMMIT_REF_SLUG"
    paths:
      - .cache/go-build
      - $GOMODCACHE
  script:
    - go version
    - go mod download
    - go test ./... -race -coverprofile=cover.out
  artifacts:
    when: always
    paths: [cover.out]
    reports:
      coverage_report:
        coverage_format: gocov
        path: cover.out
  rules:
    - if: $CI_PIPELINE_SOURCE == "merge_request_event"
    - if: $CI_COMMIT_BRANCH

docker-build:
  stage: docker
  image: docker:27
  services:
    - name: docker:27-dind
      command: ["--mtu=1460"]
  variables:
    IMAGE: $CI_REGISTRY_IMAGE
    TAG: $CI_COMMIT_SHA
  script:
    - echo "$CI_REGISTRY_PASSWORD" | docker login -u "$CI_REGISTRY_USER" "$CI_REGISTRY"
    - docker build --pull -t "$IMAGE:$TAG" .
    - docker push "$IMAGE:$TAG"
    - |
      if [ -n "$CI_COMMIT_TAG" ]; then
        docker tag "$IMAGE:$TAG" "$IMAGE:$CI_COMMIT_TAG"
        docker push "$IMAGE:$CI_COMMIT_TAG"
      elif [ "$CI_COMMIT_BRANCH" = "main" ]; then
        docker tag "$IMAGE:$TAG" "$IMAGE:latest"
        docker push "$IMAGE:latest"
      fi
  needs: ["test"]
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"

migrate:
  stage: migrate
  image: golang:1.24
  variables:
    # DB_DSN в Settings → CI/CD → Variables (masked, protected)
    DB_DSN: $DB_DSN
  script:
    - go install github.com/pressly/goose/v3/cmd/goose@latest
    - goose -dir ./migrations postgres "$DB_DSN" up
  needs: ["docker-build"]
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"

deploy:
  stage: deploy
  image: alpine:3.20
  variables:
    IMAGE: $CI_REGISTRY_IMAGE
    TAG: $CI_COMMIT_SHA
  before_script:
    - apk add --no-cache openssh-client
    - eval "$(ssh-agent -s)"
    - echo "$SSH_PRIVATE_KEY" | tr -d '\r' | ssh-add -
    - mkdir -p ~/.ssh && chmod 700 ~/.ssh
    - echo -e "Host *\n\tStrictHostKeyChecking no\n" > ~/.ssh/config
  script:
    - |
      ssh "$SSH_USER@$SSH_HOST" "
        docker login $CI_REGISTRY -u $CI_REGISTRY_USER -p $CI_REGISTRY_PASSWORD &&
        cd $REMOTE_APP_DIR &&
        docker compose pull &&
        docker compose up -d &&
        docker image prune -f
      "
  environment:
    name: production
    url: http://$PUBLIC_HOST:8080
  needs: ["docker-build","migrate"]
  rules:
    - if: $CI_COMMIT_TAG
    - if: $CI_COMMIT_BRANCH == "main"

db_backup:
  stage: backup
  image: postgres:16
  variables:
    # DB_DSN: postgres://user:pass@host:5432/tickers?sslmode=disable
    DB_DSN: $DB_DSN
  script:
    - apt-get update && apt-get install -y ca-certificates tzdata && rm -rf /var/lib/apt/lists/*
    - TS=$(date -u +%Y%m%dT%H%M%SZ)
    - FILE="db-${TS}.dump"
    - pg_dump --format=custom --no-owner --no-privileges --dbname="$DB_DSN" --file="$FILE"
    - echo "Created $FILE"
  artifacts:
    when: always
    expire_in: 14 days
    paths:
      - db-*.dump
  rules:
    - if: $CI_PIPELINE_SOURCE == "schedule"
    - if: $RUN_DB_BACKUP == "1"
